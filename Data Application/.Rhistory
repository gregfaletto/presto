stopifnot(all(!is.na(po_ps)))
logit_ps <- signif(logit_ps, digits=3)
logit_ps <- as.character(formatC(logit_ps, format="e", digits=2))
po_ps <- signif(po_ps, digits=3)
po_ps <- as.character(formatC(po_ps, format="e", digits=2))
logit_t_ps <- signif(logit_t_ps, digits=3)
logit_t_ps <- as.character(formatC(logit_t_ps, format="e", digits=2))
po_t_ps <- signif(po_t_ps, digits=3)
po_t_ps <- as.character(formatC(po_t_ps, format="e", digits=2))
ret_df <- data.frame(rare_prob_titles, logit_ps, po_ps)
colnames(ret_df) <- c("Rare Proportion", "Logit P-value", "PO P-value")
t_df <- data.frame(rare_prob_titles, logit_t_ps, po_t_ps)
colnames(t_df) <- c("Rare Proportion", "Logit P-value", "PO P-value")
# Sample means and standard errors
presto_means <- signif(presto_means, digits=3)
presto_means <- formatC(presto_means, format="e", digits=2)
presto_ses <- signif(presto_ses, digits=2)
logit_means <- signif(logit_means, digits=3)
logit_means <- formatC(logit_means, format="e", digits=2)
logit_ses <- signif(logit_ses, digits=2)
po_means <- signif(po_means, digits=3)
po_means <- formatC(po_means, format="e", digits=2)
po_ses <- signif(po_ses, digits=2)
presto_stats <- paste(presto_means, " (", presto_ses, ")", sep="")
logit_stats <- paste(logit_means, " (", logit_ses, ")", sep="")
po_stats <- paste(po_means, " (", po_ses, ")", sep="")
mean_se_df <- data.frame(rare_prob_titles, presto_stats, logit_stats,
po_stats)
colnames(mean_se_df) <- c("Rare Proportion", "PRESTO", "Logit", "PO")
return(list(wilcoxon_p_df=ret_df, t_d_df=t_df, summary_df=mean_se_df))
}
plot_ratios <- function(df, title, loss_name="rare_prob_mse_gen",
ylab="MSE Ratio (PRESTO/Other)",
meth_names=c("fused_polr", "logit_meth",
"prop_odds_meth")){
require(ggplot2)
presto_losses <- df[df$Method == meth_names[1], loss_name]
logit_losses <- df[df$Method == meth_names[2], loss_name]
po_losses <- df[df$Method == meth_names[3], loss_name]
logit_ratio <- presto_losses/logit_losses
po_ratio <- presto_losses/po_losses
n <- length(logit_ratio)
stopifnot(n == length(po_ratio))
labels <- c(rep("Logit", n), rep("PO", n))
df_gg <- data.frame(Labels=labels, MSE=c(logit_ratio, po_ratio))
plot <- ggplot(df_gg, aes(x=Labels, y=MSE)) + geom_boxplot() +
ggtitle(title) + geom_hline(yintercept=1, color="red",
linetype="dashed") + ylab(ylab) +
scale_y_log10()
return(plot)
}
rare_probs <- function(sim){
rare_prob_df <- sim |> evals() |> as.data.frame()
mod_names <- unique(rare_prob_df$Model)
n_models <- length(mod_names)
stopifnot(n_models >= 1)
rare_probs <- rep(as.numeric(NA), n_models)
for(i in 1:n_models){
rare_probs[i] <- mean(rare_prob_df[rare_prob_df$Model == mod_names[i],
"prop_rare_obs"])
}
stopifnot(all(!is.na(rare_probs)))
stopifnot(all(rare_probs >= 0))
stopifnot(all(rare_probs <= 1))
return(rare_probs)
}
create_plots <- function(sim){
require(cowplot)
require(ggplot2)
# sim <- sim |> evaluate(list(rare_prob_mse_gen, prop_rare_obs))
rare_probs <- round(100*rare_probs(sim), 2)
titles <- paste("Rare Proportion: ", rare_probs, "%", sep="")
# main text plot
boxplot_2 <- sim |> subset_simulation(subset=2) |>
plot_eval("rare_prob_mse_gen") + ggtitle(titles[2]) + xlab(NULL)
e_df <- as.data.frame(evals(sim))
stopifnot("rare_prob_mse_gen" %in% colnames(e_df))
stopifnot("prop_rare_obs" %in% colnames(e_df))
ratio_plot_1 <- sim |> subset_simulation(subset=1) |> evals() |>
as.data.frame() |> plot_ratios(titles[1]) + xlab(NULL)
ratio_plot_2 <- sim |> subset_simulation(subset=2) |> evals() |>
as.data.frame() |> plot_ratios(titles[2]) + xlab(NULL)
ratio_plot_3 <- sim |> subset_simulation(subset=3) |> evals() |>
as.data.frame() |> plot_ratios(titles[3]) + xlab(NULL)
plot_1 <- plot_grid(boxplot_2, ratio_plot_2, ratio_plot_3, ratio_plot_1,
ncol = 2, nrow = 2)
# supplement plot
boxplot_1 <- sim |> subset_simulation(subset=1) |>
plot_eval("rare_prob_mse_gen") + ggtitle(titles[1]) + xlab(NULL)
boxplot_3 <- sim |> subset_simulation(subset=3) |>
plot_eval("rare_prob_mse_gen") + ggtitle(titles[3]) + xlab(NULL)
supp_plot <- plot_grid(boxplot_1, boxplot_3, ncol = 2, nrow = 1)
return(list(main_plot=plot_1, supp_plot=supp_plot))
}
create_data_app_plots <- function(sim){
require(cowplot)
require(ggplot2)
# sim <- sim |> evaluate(list(cal_osce_gen_data_app))
boxplot <- sim |> plot_eval("cal_osce_gen_data_app") + ggtitle(NULL) +
xlab(NULL)
e_df <- as.data.frame(evals(sim))
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
ratio_plot <- sim |> evals() |> as.data.frame() |>
plot_ratios(NULL, loss_name="cal_osce_gen_data_app",
meth_names=c("fused_polr_data_analysis_vec", "logit_meth_gen",
"prop_odds_data_analysis_vec")) + xlab(NULL)
plot_1 <- plot_grid(boxplot, ratio_plot, ncol = 2)
return(plot_1)
}
# sim <- sim |> evaluate(list(rare_prob_mse_gen, prop_rare_obs))
# sim <- sim |> evaluate(list(rare_prob_mse_gen, prop_rare_obs))
# dfs <- df_sim_stats(sim)
# sim <- sim |> evaluate(list(rare_prob_mse_gen, prop_rare_obs))
# dfs <- df_sim_stats(sim)
# plots <- create_plots(sim)
dev.off()
create_data_app_plots(sim)
create_data_app_plots <- function(sim){
require(cowplot)
require(ggplot2)
# sim <- sim |> evaluate(list(cal_osce_gen_data_app))
boxplot <- sim |> plot_eval("cal_osce_gen_data_app") + ggtitle(NULL) +
xlab(NULL)
e_df <- as.data.frame(evals(sim))
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
ratio_plot <- sim |> evals() |> as.data.frame() |>
plot_ratios(NULL, loss_name="cal_osce_gen_data_app",
meth_names=c("fused_polr_data_analysis_vec", "logit_meth_gen",
"prop_odds_data_analysis_vec"),
ylab="Estimated MSE") + xlab(NULL)
plot_1 <- plot_grid(boxplot, ratio_plot, ncol = 2)
return(plot_1)
}
create_data_app_plots(sim)
create_data_app_plots <- function(sim){
require(cowplot)
require(ggplot2)
# sim <- sim |> evaluate(list(cal_osce_gen_data_app))
boxplot <- sim |> plot_eval("cal_osce_gen_data_app") + ggtitle(NULL) +
xlab(NULL) + ylab("Estimated Rare Probability MSE")
e_df <- as.data.frame(evals(sim))
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
ratio_plot <- sim |> evals() |> as.data.frame() |>
plot_ratios(NULL, loss_name="cal_osce_gen_data_app",
meth_names=c("fused_polr_data_analysis_vec", "logit_meth_gen",
"prop_odds_data_analysis_vec"),
ylab="Estimated MSE Ratio (PRESTO/Other)") + xlab(NULL)
plot_1 <- plot_grid(boxplot, ratio_plot, ncol = 2)
return(plot_1)
}
create_data_app_plots(sim)
df_data_app_stats <- function(sim){
e_df <- evals(sim) |> as.data.frame()
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
stopifnot("prop_rare_obs" %in% colnames(e_df))
models <- model(sim)
model_names <- unique(e_df$Model)
n_models <- length(model_names)
stopifnot(length(rare_prob_titles) == n_models)
# model_labels <- rep(as.character(NA), n_models)
method_names <- unique(e_df$Method)
for(i in 1:n_models){
ind_i <- models[[i]]@name == model_names
stopifnot(sum(ind_i) == 1)
stopifnot(which(ind_i) == i)
# model_labels[ind_i] <- models[[i]]@label
}
presto_means <- rep(as.numeric(NA), n_models)
logit_means <- rep(as.numeric(NA), n_models)
po_means <- rep(as.numeric(NA), n_models)
for(i in 1:n_models){
e_df_i <- e_df[e_df$Model == model_names[i], ]
presto_mses <- e_df_i[e_df_i$Method == "fused_polr", "rare_prob_mse_gen"]
sample_size <- length(presto_mses)
print("sample size:")
print(sample_size)
logit_mses <- e_df_i[e_df_i$Method == "logit_meth", "rare_prob_mse_gen"]
stopifnot(length(logit_mses) == sample_size)
po_mses <- e_df_i[e_df_i$Method == "prop_odds_meth", "rare_prob_mse_gen"]
stopifnot(length(po_mses) == sample_size)
# Summary statistics
presto_means[i] <- mean(presto_mses)
logit_means[i] <- mean(logit_mses)
po_means[i] <- mean(po_mses)
}
# Sample means and standard errors
presto_means <- signif(presto_means, digits=3)
presto_means <- formatC(presto_means, format="e", digits=2)
logit_means <- signif(logit_means, digits=3)
logit_means <- formatC(logit_means, format="e", digits=2)
po_means <- signif(po_means, digits=3)
po_means <- formatC(po_means, format="e", digits=2)
# presto_stats <- paste(presto_means, " (", presto_ses, ")", sep="")
# logit_stats <- paste(logit_means, " (", logit_ses, ")", sep="")
# po_stats <- paste(po_means, " (", po_ses, ")", sep="")
mean_df <- data.frame(rare_prob_titles, presto_means, logit_means,
po_means)
colnames(mean_df) <- c("Rare Proportion", "PRESTO", "Logit", "PO")
return(mean_df)
}
df_data_app_stats(sim)
df_data_app_stats <- function(sim){
e_df <- evals(sim) |> as.data.frame()
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
models <- model(sim)
model_names <- unique(e_df$Model)
n_models <- length(model_names)
stopifnot(length(rare_prob_titles) == n_models)
# model_labels <- rep(as.character(NA), n_models)
method_names <- unique(e_df$Method)
for(i in 1:n_models){
ind_i <- models[[i]]@name == model_names
stopifnot(sum(ind_i) == 1)
stopifnot(which(ind_i) == i)
# model_labels[ind_i] <- models[[i]]@label
}
presto_means <- rep(as.numeric(NA), n_models)
logit_means <- rep(as.numeric(NA), n_models)
po_means <- rep(as.numeric(NA), n_models)
for(i in 1:n_models){
e_df_i <- e_df[e_df$Model == model_names[i], ]
presto_mses <- e_df_i[e_df_i$Method == "fused_polr",
"cal_osce_gen_data_app"]
sample_size <- length(presto_mses)
print("sample size:")
print(sample_size)
logit_mses <- e_df_i[e_df_i$Method == "logit_meth",
"cal_osce_gen_data_app"]
stopifnot(length(logit_mses) == sample_size)
po_mses <- e_df_i[e_df_i$Method == "prop_odds_meth",
"cal_osce_gen_data_app"]
stopifnot(length(po_mses) == sample_size)
# Summary statistics
presto_means[i] <- mean(presto_mses)
logit_means[i] <- mean(logit_mses)
po_means[i] <- mean(po_mses)
}
# Sample means and standard errors
presto_means <- signif(presto_means, digits=3)
presto_means <- formatC(presto_means, format="e", digits=2)
logit_means <- signif(logit_means, digits=3)
logit_means <- formatC(logit_means, format="e", digits=2)
po_means <- signif(po_means, digits=3)
po_means <- formatC(po_means, format="e", digits=2)
# presto_stats <- paste(presto_means, " (", presto_ses, ")", sep="")
# logit_stats <- paste(logit_means, " (", logit_ses, ")", sep="")
# po_stats <- paste(po_means, " (", po_ses, ")", sep="")
mean_df <- data.frame(rare_prob_titles, presto_means, logit_means,
po_means)
colnames(mean_df) <- c("Rare Proportion", "PRESTO", "Logit", "PO")
return(mean_df)
}
df_data_app_stats(sim)
df_data_app_stats <- function(sim){
e_df <- evals(sim) |> as.data.frame()
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
models <- model(sim)
model_names <- unique(e_df$Model)
n_models <- length(model_names)
stopifnot(length(rare_prob_titles) == n_models)
# model_labels <- rep(as.character(NA), n_models)
method_names <- unique(e_df$Method)
for(i in 1:n_models){
ind_i <- models[[i]]@name == model_names
stopifnot(sum(ind_i) == 1)
stopifnot(which(ind_i) == i)
# model_labels[ind_i] <- models[[i]]@label
}
presto_means <- rep(as.numeric(NA), n_models)
logit_means <- rep(as.numeric(NA), n_models)
po_means <- rep(as.numeric(NA), n_models)
stopifnot(n_models == 1)
for(i in 1:n_models){
e_df_i <- e_df[e_df$Model == model_names[i], ]
presto_mses <- e_df_i[e_df_i$Method == "fused_polr",
"cal_osce_gen_data_app"]
sample_size <- length(presto_mses)
print("sample size:")
print(sample_size)
logit_mses <- e_df_i[e_df_i$Method == "logit_meth",
"cal_osce_gen_data_app"]
stopifnot(length(logit_mses) == sample_size)
po_mses <- e_df_i[e_df_i$Method == "prop_odds_meth",
"cal_osce_gen_data_app"]
stopifnot(length(po_mses) == sample_size)
# Summary statistics
presto_means[i] <- mean(presto_mses)
logit_means[i] <- mean(logit_mses)
po_means[i] <- mean(po_mses)
}
# Sample means and standard errors
presto_means <- signif(presto_means, digits=3)
presto_means <- formatC(presto_means, format="e", digits=2)
logit_means <- signif(logit_means, digits=3)
logit_means <- formatC(logit_means, format="e", digits=2)
po_means <- signif(po_means, digits=3)
po_means <- formatC(po_means, format="e", digits=2)
# presto_stats <- paste(presto_means, " (", presto_ses, ")", sep="")
# logit_stats <- paste(logit_means, " (", logit_ses, ")", sep="")
# po_stats <- paste(po_means, " (", po_ses, ")", sep="")
mean_df <- c(presto_means, logit_means, po_means)
names(mean_df) <- c("PRESTO", "Logit", "PO")
return(mean_df)
}
df_data_app_stats(sim)
df_data_app_stats <- function(sim){
e_df <- evals(sim) |> as.data.frame()
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
models <- model(sim)
model_names <- unique(e_df$Model)
n_models <- length(model_names)
# model_labels <- rep(as.character(NA), n_models)
method_names <- unique(e_df$Method)
for(i in 1:n_models){
ind_i <- models[[i]]@name == model_names
stopifnot(sum(ind_i) == 1)
stopifnot(which(ind_i) == i)
# model_labels[ind_i] <- models[[i]]@label
}
presto_means <- rep(as.numeric(NA), n_models)
logit_means <- rep(as.numeric(NA), n_models)
po_means <- rep(as.numeric(NA), n_models)
stopifnot(n_models == 1)
for(i in 1:n_models){
e_df_i <- e_df[e_df$Model == model_names[i], ]
presto_mses <- e_df_i[e_df_i$Method == "fused_polr",
"cal_osce_gen_data_app"]
sample_size <- length(presto_mses)
print("sample size:")
print(sample_size)
logit_mses <- e_df_i[e_df_i$Method == "logit_meth",
"cal_osce_gen_data_app"]
stopifnot(length(logit_mses) == sample_size)
po_mses <- e_df_i[e_df_i$Method == "prop_odds_meth",
"cal_osce_gen_data_app"]
stopifnot(length(po_mses) == sample_size)
# Summary statistics
presto_means[i] <- mean(presto_mses)
logit_means[i] <- mean(logit_mses)
po_means[i] <- mean(po_mses)
}
# Sample means and standard errors
presto_means <- signif(presto_means, digits=3)
presto_means <- formatC(presto_means, format="e", digits=2)
logit_means <- signif(logit_means, digits=3)
logit_means <- formatC(logit_means, format="e", digits=2)
po_means <- signif(po_means, digits=3)
po_means <- formatC(po_means, format="e", digits=2)
# presto_stats <- paste(presto_means, " (", presto_ses, ")", sep="")
# logit_stats <- paste(logit_means, " (", logit_ses, ")", sep="")
# po_stats <- paste(po_means, " (", po_ses, ")", sep="")
mean_df <- c(presto_means, logit_means, po_means)
names(mean_df) <- c("PRESTO", "Logit", "PO")
return(mean_df)
}
df_data_app_stats(sim)
df_data_app_stats <- function(sim){
e_df <- evals(sim) |> as.data.frame()
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
models <- model(sim)
model_names <- unique(e_df$Model)
n_models <- length(model_names)
# model_labels <- rep(as.character(NA), n_models)
method_names <- unique(e_df$Method)
stopifnot(n_models == 1)
presto_mses <- e_df[e_df$Method == "fused_polr",
"cal_osce_gen_data_app"]
sample_size <- length(presto_mses)
print("sample size:")
print(sample_size)
logit_mses <- e_df[e_df$Method == "logit_meth",
"cal_osce_gen_data_app"]
stopifnot(length(logit_mses) == sample_size)
po_mses <- e_df[e_df$Method == "prop_odds_meth",
"cal_osce_gen_data_app"]
stopifnot(length(po_mses) == sample_size)
# Summary statistics
presto_mean <- mean(presto_mses)
logit_mean <- mean(logit_mses)
po_mean <- mean(po_mses)
# Sample means and standard errors
presto_mean <- signif(presto_mean, digits=3)
presto_mean <- formatC(presto_mean, format="e", digits=2)
logit_mean <- signif(logit_mean, digits=3)
logit_mean <- formatC(logit_mean, format="e", digits=2)
po_mean <- signif(po_mean, digits=3)
po_mean <- formatC(po_mean, format="e", digits=2)
# presto_stats <- paste(presto_means, " (", presto_ses, ")", sep="")
# logit_stats <- paste(logit_means, " (", logit_ses, ")", sep="")
# po_stats <- paste(po_means, " (", po_ses, ")", sep="")
mean_df <- c(presto_means, logit_means, po_means)
names(mean_df) <- c("PRESTO", "Logit", "PO")
return(mean_df)
}
df_data_app_stats(sim)
df_data_app_stats <- function(sim){
e_df <- evals(sim) |> as.data.frame()
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
models <- model(sim)
model_names <- unique(e_df$Model)
n_models <- length(model_names)
# model_labels <- rep(as.character(NA), n_models)
method_names <- unique(e_df$Method)
stopifnot(n_models == 1)
presto_mses <- e_df[e_df$Method == "fused_polr",
"cal_osce_gen_data_app"]
sample_size <- length(presto_mses)
print("sample size:")
print(sample_size)
logit_mses <- e_df[e_df$Method == "logit_meth",
"cal_osce_gen_data_app"]
stopifnot(length(logit_mses) == sample_size)
po_mses <- e_df[e_df$Method == "prop_odds_meth",
"cal_osce_gen_data_app"]
stopifnot(length(po_mses) == sample_size)
# Summary statistics
presto_mean <- mean(presto_mses)
logit_mean <- mean(logit_mses)
po_mean <- mean(po_mses)
# Sample means and standard errors
presto_mean <- signif(presto_mean, digits=3)
presto_mean <- formatC(presto_mean, format="e", digits=2)
logit_mean <- signif(logit_mean, digits=3)
logit_mean <- formatC(logit_mean, format="e", digits=2)
po_mean <- signif(po_mean, digits=3)
po_mean <- formatC(po_mean, format="e", digits=2)
# presto_stats <- paste(presto_means, " (", presto_ses, ")", sep="")
# logit_stats <- paste(logit_means, " (", logit_ses, ")", sep="")
# po_stats <- paste(po_means, " (", po_ses, ")", sep="")
mean_df <- c(presto_mean, logit_mean, po_mean)
names(mean_df) <- c("PRESTO", "Logit", "PO")
return(mean_df)
}
df_data_app_stats(sim)
df_data_app_stats <- function(sim){
e_df <- evals(sim) |> as.data.frame()
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
models <- model(sim)
model_names <- unique(e_df$Model)
n_models <- length(model_names)
# model_labels <- rep(as.character(NA), n_models)
method_names <- unique(e_df$Method)
stopifnot(n_models == 1)
presto_mses <- e_df[e_df$Method == "fused_polr_data_analysis_vec",
"cal_osce_gen_data_app"]
sample_size <- length(presto_mses)
print("sample size:")
print(sample_size)
logit_mses <- e_df[e_df$Method == "logit_meth_gen",
"cal_osce_gen_data_app"]
stopifnot(length(logit_mses) == sample_size)
po_mses <- e_df[e_df$Method == "prop_odds_data_analysis_vec",
"cal_osce_gen_data_app"]
stopifnot(length(po_mses) == sample_size)
# Summary statistics
presto_mean <- mean(presto_mses)
logit_mean <- mean(logit_mses)
po_mean <- mean(po_mses)
# Sample means and standard errors
presto_mean <- signif(presto_mean, digits=3)
presto_mean <- formatC(presto_mean, format="e", digits=2)
logit_mean <- signif(logit_mean, digits=3)
logit_mean <- formatC(logit_mean, format="e", digits=2)
po_mean <- signif(po_mean, digits=3)
po_mean <- formatC(po_mean, format="e", digits=2)
# presto_stats <- paste(presto_means, " (", presto_ses, ")", sep="")
# logit_stats <- paste(logit_means, " (", logit_ses, ")", sep="")
# po_stats <- paste(po_means, " (", po_ses, ")", sep="")
mean_df <- c(presto_mean, logit_mean, po_mean)
names(mean_df) <- c("PRESTO", "Logit", "PO")
return(mean_df)
}
df_data_app_stats(sim)
df_data_app_stats <- function(sim){
e_df <- evals(sim) |> as.data.frame()
stopifnot("cal_osce_gen_data_app" %in% colnames(e_df))
models <- model(sim)
model_names <- unique(e_df$Model)
n_models <- length(model_names)
# model_labels <- rep(as.character(NA), n_models)
method_names <- unique(e_df$Method)
stopifnot(n_models == 1)
presto_mses <- e_df[e_df$Method == "fused_polr_data_analysis_vec",
"cal_osce_gen_data_app"]
sample_size <- length(presto_mses)
print("sample size:")
print(sample_size)
logit_mses <- e_df[e_df$Method == "logit_meth_gen",
"cal_osce_gen_data_app"]
stopifnot(length(logit_mses) == sample_size)
po_mses <- e_df[e_df$Method == "prop_odds_data_analysis_vec",
"cal_osce_gen_data_app"]
stopifnot(length(po_mses) == sample_size)
# Summary statistics
presto_mean <- mean(presto_mses)
logit_mean <- mean(logit_mses)
po_mean <- mean(po_mses)
# Sample means and standard errors
presto_mean <- signif(presto_mean, digits=3)
# presto_mean <- formatC(presto_mean, format="e", digits=2)
logit_mean <- signif(logit_mean, digits=3)
# logit_mean <- formatC(logit_mean, format="e", digits=2)
po_mean <- signif(po_mean, digits=3)
# po_mean <- formatC(po_mean, format="e", digits=2)
# presto_stats <- paste(presto_means, " (", presto_ses, ")", sep="")
# logit_stats <- paste(logit_means, " (", logit_ses, ")", sep="")
# po_stats <- paste(po_means, " (", po_ses, ")", sep="")
mean_df <- c(presto_mean, logit_mean, po_mean)
names(mean_df) <- c("PRESTO", "Logit", "PO")
return(mean_df)
}
df_data_app_stats(sim)
