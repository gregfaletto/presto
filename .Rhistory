# denominator: classified as being in class 1
denom_count <- sum(probs > 0.5)
num_count <- sum((probs > 0.5) & (y_true == 1))
precision <- num_count/denom_count
precision
probs
y_true
denom_count
?sample
set.seed(23541)
n <- 10
p <- 3
X <- matrix(runif(n*p, min=1, max=10), n, p)
beta <- c(0.6, 2.5, 1.3)
y <- X %*% beta + rnorm(n)
X
y
# Start by setting objective function
obj_func <- function(beta_hat){
resids <- y - X %*% beta_hat
return(sum(resids^2))
}
obj_func(rep(0, 3))
obj_func(beta_hat=beta)
gradGreg <- function(beta_hat, x_i, y_i){
resid <- x_i %*% beta_hat - y_i
return(2*x_i*resid)
}
gradGreg(rep(0, p), X[1, ], y[1])
gradGreg <- function(beta_hat, x_i, y_i){
print("x_i:")
print(x_i)
print("x_i %*% beta_hat:")
print(x_i %*% beta_hat)
resid <- x_i %*% beta_hat - y_i
return(2*x_i*resid)
}
gradGreg(rep(0, p), X[1, ], y[1])
gradGreg <- function(beta_hat, x_i, y_i){
print("x_i:")
print(x_i)
print("x_i %*% beta_hat:")
print(x_i %*% beta_hat)
resid <- as.numeric(x_i %*% beta_hat) - y_i
return(2*x_i*resid)
}
gradGreg <- function(beta_hat, x_i, y_i){
# print("x_i:")
# print(x_i)
# print("x_i %*% beta_hat:")
# print(x_i %*% beta_hat)
resid <- as.numeric(x_i %*% beta_hat) - y_i
return(2*x_i*resid)
}
gradGreg(rep(0, p), X[1, ], y[1])
gradGreg(beta, X[1, ], y[1])
sample(1:n, size=1)
# Stochastic gradient descent
solveStoch <- function(X, y, init, lr = 0.0001, n_iterations = 10000){
n <- nrow(X)
stopifnot(n == length(y))
beta_hat <- init
for(i in 1:n_iterations){
# Choose a random observation
ind_i <- sample(1:n, size=1)
# Update taking a small step in gradient direction
gradient_i <- gradGreg(beta_hat=beta_hat, x_i=X[ind_i, ], y_i=y[ind_i])
beta_hat <- beta_hat - lr*gradient_i
}
return(beta_hat)
}
solveStoch(X, y, rep(0, p))
beta
library(simulator)
simulate_func <- function(x, nsim){
ret_list <- list()
for(i in 1:nsim){
ret_list[[i]] <- 1
}
return(ret_list)
}
error_sim_model <- function(x){
my_model <- new_model(name = "error_sim_model",
label = "err_model",
params = list(x=x),
simulate = simulate_func
)
return(my_model)
}
bad_meth <- new_method("bad_meth", "Bad method",
method = function(model, draw) {
if(as.logical(rbinom(n=1, size=1, prob=0.5))){
return(list(a=2))
} else{
return(list(b=3))
}
return(ret)
}
)
sim <- new_simulation("sim", "Error sim")
sim <- generate_model(sim, error_sim_model, x=2)
sim <- generate_model(sim, error_sim_model, x=2)
sim <- simulate_from_model(sim, nsim = 20)
sim <- run_method(sim, list(bad_meth))
library(simulator)
simulate_func <- function(x, nsim){
ret_list <- list()
for(i in 1:nsim){
ret_list[[i]] <- 1
}
return(ret_list)
}
error_sim_model <- function(x){
my_model <- new_model(name = "error_sim_model",
label = "err_model",
params = list(x=x),
simulate = simulate_func
)
return(my_model)
}
bad_meth <- new_method("bad_meth", "Bad method",
method = function(model, draw) {
if(as.logical(rbinom(n=1, size=1, prob=0.5))){
return(list(a=2))
} else{
return(list(b=3))
}
return(ret)
}
)
sim <- new_simulation("sim", "Error sim")
sim <- generate_model(sim, error_sim_model, x=2)
sim <- simulate_from_model(sim, nsim = 20)
sim <- run_method(sim, list(bad_meth))
library(simulator)
set.seed(12375)
simulate_func <- function(x, nsim){
ret_list <- list()
for(i in 1:nsim){
ret_list[[i]] <- 1
}
return(ret_list)
}
error_sim_model <- function(x){
my_model <- new_model(name = "error_sim_model",
label = "err_model",
params = list(x=x),
simulate = simulate_func
)
return(my_model)
}
bad_meth <- new_method("bad_meth", "Bad method",
method = function(model, draw) {
if(as.logical(rbinom(n=1, size=1, prob=0.5))){
return(list(a=2))
} else{
return(list(b=3))
}
return(ret)
}
)
sim <- new_simulation("sim", "Error sim")
sim <- generate_model(sim, error_sim_model, x=2)
sim <- simulate_from_model(sim, nsim = 20)
sim <- run_method(sim, list(bad_meth))
setwd("/Users/gregfaletto/Documents/GitHub/presto")
source("4_2_dense_diffs.R")
save_simulation(dense_sim)
print(plot_eval(dense_sim, "rare_prob_mse_gen"))
print(plot_eval(dense_sim, "rare_prob_mse_gen")) + scale_y_log10(())
print(plot_eval(dense_sim, "rare_prob_mse_gen")) + scale_y_log10()
df_sim_stats(dense_sim, methods_to_compare=c("logit_meth",
"prop_odds_meth"))
dense_plots_1_2 <- create_sparse_plots(dense_sim, plots=c(2, 3, 4))
dense_plots_1_2$main_plot
# Figure 2
fig_2 <- dense_plots_1_2$main_plot
# Figure 8
fig_8 <- dense_plots_1_2$supp_plot
fig_2
fig_8
create_sparse_plot2(dense, plots=c(1))
create_sparse_plot2(dense_sim, plots=1)
ret <- df_sim_stats(dense_sim, methods_to_compare=c("logit_meth",
"prop_odds_meth"))
# Table 1
stargazer(ret$t_d_df, summary=FALSE)
# Table 5
stargazer(ret$summary_df, summary=FALSE)
ret
dev.off()
fig_2
fig_8
fig_9 <- create_sparse_plot2(dense_sim, plots=1)
fig_9
stargazer(ret$summary_df, summary=FALSE)
rm(list=ls())
setwd("/Users/gregfaletto/Documents/GitHub/presto")
sparse_sim <- load_simulation("sparse_sim")
stargazer(ret$summary_df, summary=FALSE)
dev.off()
sparse_plots_1_2 <- create_sparse_plots(subset_simulation(sparse_sim,
methods=c("logit_meth", "prop_odds_meth", "fused_polr")))
dir_main <- getwd()
dir_ordnet <- paste(dir_main, "/ordinalNet modified", sep="")
setwd(dir_ordnet)
source("cdIn.R")
source("cdOut.R")
source("links.R")
source("mirlsNet.R")
source("misc.R")
source("ordinalNet-methods.R")
source("ordinalNet.R")
source("ordinalNetCV.R")
source("ordinalNetTune.R")
setwd(dir_main)
dir_code <- paste(dir_main, "/Simulations", sep="")
setwd(dir_code)
source("model_functions.R")
source("method_functions.R")
source("eval_functions.R")
source("sim_eval_function.R")
setwd(dir_main)
t0 <- Sys.time()
sparse_plots_1_2 <- create_sparse_plots(subset_simulation(sparse_sim,
methods=c("logit_meth", "prop_odds_meth", "fused_polr")))
# Figure 1 or 6;
fig_6 <- sparse_plots_1_2$main_plot
# Figure 5 or 7;
fig_7 <- sparse_plots_1_2$supp_plot
sparse_plots_1_3 <- create_sparse_plots(subset_simulation(sparse_sim,
methods=c("logit_meth", "prop_odds_meth", "fused_polr")), plots=c(2, 4, 6))
# Figure 1 or 6;
fig_1 <- sparse_plots_1_3$main_plot
# Figure 5 or 7;
fig_5 <- sparse_plots_1_3$supp_plot
# Need to figure out which plots to use for these two plots that include
# ridge PRESTO; ALSO NEED TO FIGURE OUT TABLE TO MAKE
create_sparse_plot2(sparse_sim, plots=c(3))
create_sparse_plot2(sparse_sim, plots=c(4))
ret <- df_sim_stats(subset_simulation(sparse_sim, methods=c("logit_meth",
"prop_odds_meth", "fused_polr")),
methods_to_compare=c("logit_meth", "prop_odds_meth"
# , "lasso_logit"
))
# Table 3
stargazer(ret$t_d_df, summary=FALSE)
# Table 4
stargazer(ret$summary_df, summary=FALSE)
ret
dev.off()
fig_1
fig_6
dev.off()
sparse_plots_1_2 <- create_sparse_plots(subset_simulation(sparse_sim,
methods=c("logit_meth", "prop_odds_meth", "fused_polr")))
# Figure 6 (sparsity 1/2)
fig_6 <- sparse_plots_1_2$main_plot
# Figure 5 or 7; (sparsity 1/2)
fig_7 <- sparse_plots_1_2$supp_plot
sparse_plots_1_3 <- create_sparse_plots(subset_simulation(sparse_sim,
methods=c("logit_meth", "prop_odds_meth", "fused_polr")), plots=c(2, 4, 6))
# Figure 1 (sparsity 1/3)
fig_1 <- sparse_plots_1_3$main_plot
# Figure 5 or 7; (sparsity 1/3)
fig_5 <- sparse_plots_1_3$supp_plot
fig_1
fig_6
fig_6
dev.off()
fig_6
fig_5
dev.off()
fig_7
sparse_plots_1_2 <- create_sparse_plots(sparse_sim)
# Figure 6 (sparsity 1/2)
fig_6 <- sparse_plots_1_2$main_plot
# Figure 5 or 7; (sparsity 1/2)
fig_7 <- sparse_plots_1_2$supp_plot
fig_6
dev.off()
sparse_plots_1_2 <- create_sparse_plots(sparse_sim,
methods=c("logit_meth", "prop_odds_meth", "fused_polr")))
sparse_plots_1_2 <- create_sparse_plots(subset_simulation(sparse_sim,
methods=c("logit_meth", "prop_odds_meth", "fused_polr")))
# Figure 6 (sparsity 1/2)
fig_6 <- sparse_plots_1_2$main_plot
# Figure 5 or 7; (sparsity 1/2)
fig_7 <- sparse_plots_1_2$supp_plot
fig_10 <- create_sparse_plot2(sparse_sim, plots=c(1))
fig_11 <- create_sparse_plot2(sparse_sim, plots=c(2))
fig_10
fig_11
setwd(dir_code)
source("model_functions.R")
source("method_functions.R")
source("eval_functions.R")
source("sim_eval_function.R")
setwd(dir_main)
fig_10 <- create_sparse_plot2_ridge(sparse_sim, plots=1)
# Figure 11
fig_11 <- ccreate_sparse_plot2_ridge(sparse_sim, plots=2)
fig_10
setwd(dir_code)
source("model_functions.R")
source("method_functions.R")
source("eval_functions.R")
source("sim_eval_function.R")
setwd(dir_main)
fig_10 <- create_sparse_plot2_ridge(sparse_sim, plots=1)
setwd(dir_code)
source("model_functions.R")
source("method_functions.R")
source("eval_functions.R")
source("sim_eval_function.R")
setwd(dir_main)
fig_10 <- create_sparse_plot2_ridge(sparse_sim, plots=1)
setwd(dir_code)
source("model_functions.R")
source("method_functions.R")
source("eval_functions.R")
source("sim_eval_function.R")
setwd(dir_main)
fig_10 <- create_sparse_plot2_ridge(sparse_sim, plots=1)
dev.off()
fig_10
fig_11 <- create_sparse_plot2_ridge(sparse_sim, plots=2)
ret_ridge <- df_sim_stats(subset_simulation(sparse_sim, methods=c("logit_meth",
"prop_odds_meth", "fused_polr", "fused_polr_l2")),
methods_to_compare=c("logit_meth", "prop_odds_meth", "fused_polr_l2"))
fig_11
ret_ridge
dev.off()
fig_10
fig_11
stargazer(ret_ridge$t_d_df, summary=FALSE)
stargazer(ret_ridge$summary_df, summary=FALSE)
source("pd_test.R")
source("pd_test.R")
ggplot(df, aes(y=lambda_min)) + geom_boxplot() + coord_flip() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
ylab("Minimum Eigenvalue")
ggplot(df, aes(x=lambda_min)) + geom_boxplot() + coord_flip() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
xlab("Minimum Eigenvalue")
source("pd_sim.R")
source("pd_sim.R")
eigenplot4 <- subset_simulation(eigensim, corr==0.75) |>
plot_eval_by(eigensim2, "eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.75")
eigenplot4 <- subset_simulation(eigensim2, corr==0.75) |>
plot_eval_by(eigensim2, "eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.75")
eigenplot4 <- subset_simulation(eigensim2, corr==0.75) |>
plot_eval_by("eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.75")
print(eigenplot4)
eigenplot1 <- subset_simulation(eigensim2, corr==0) |>
plot_eval_by("eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0")
print(eigenplot1)
eigenplot2 <- subset_simulation(eigensim2, corr==0.25) |>
plot_eval_by("eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.25")
print(eigenplot2)
eigenplot3 <- subset_simulation(eigensim2, corr==0.5) |>
plot_eval_by("eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.5")
print(eigenplot3)
# Plots for condition being satisfied
cond_plot_1 <- subset_simulation(eigensim2, corr==0) |>
plot_eval_by("eigeneval2", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
# geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0")
print(cond_plot_1)
cond_plot_2 <- subset_simulation(eigensim2, corr==0.25) |>
plot_eval_by("eigeneval2", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
# geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.25")
print(cond_plot_2)
cond_plot_3 <- subset_simulation(eigensim2, corr==0.5) |>
plot_eval_by("eigeneval2", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
# geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.5")
print(cond_plot_3)
cond_plot_4 <- subset_simulation(eigensim2, corr==0.75) |>
plot_eval_by("eigeneval2", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
# geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.75 ")
print(cond_plot_4)
print("Total time:")
print(Sys.time() - t0)
dev.off()
eigenplot4 <- subset_simulation(eigensim2, corr==0.75) |>
plot_eval_by("eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.75")
print(eigenplot4)
eigenplot1 <- subset_simulation(eigensim2, corr==0) |>
plot_eval_by("eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0")
print(eigenplot1)
eigenplot2 <- subset_simulation(eigensim2, corr==0.25) |>
plot_eval_by("eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.25")
print(eigenplot2)
eigenplot3 <- subset_simulation(eigensim2, corr==0.5) |>
plot_eval_by("eigeneval", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.5")
print(eigenplot3)
# Plots for condition being satisfied
cond_plot_1 <- subset_simulation(eigensim2, corr==0) |>
plot_eval_by("eigeneval2", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
# geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0")
print(cond_plot_1)
cond_plot_2 <- subset_simulation(eigensim2, corr==0.25) |>
plot_eval_by("eigeneval2", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
# geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.25")
print(cond_plot_2)
cond_plot_3 <- subset_simulation(eigensim2, corr==0.5) |>
plot_eval_by("eigeneval2", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
# geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.5")
print(cond_plot_3)
cond_plot_4 <- subset_simulation(eigensim2, corr==0.75) |>
plot_eval_by("eigeneval2", varying="rare_prob",
include_zero=TRUE) +
scale_x_log10() +
# scale_y_log10() +
# geom_hline(yintercept=0, color="red", linetype="dashed") +
xlab("Rare Class Probability") + theme(legend.position="none") +
ggtitle("Correlation = 0.75 ")
print(cond_plot_4)
